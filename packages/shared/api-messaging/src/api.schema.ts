/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header: {
                    "X-Message-ID": string;
                    /** @description Document query message types. */
                    "X-Message-Type": "GetDocument" | "GetDocuments";
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["GetDocument"] | components["schemas"]["GetDocuments"];
                };
            };
            responses: {
                /** @description Message processed successfully. If a specific response will be returned for a given message, it will be defined. */
                200: {
                    headers: {
                        "X-Correlation-ID": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetDocumentResponse"] | components["schemas"]["GetDocumentsResponse"];
                    };
                };
                /** @description An error occurred (covers any error status codes). */
                default: {
                    headers: {
                        "X-Correlation-ID": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header: {
                    "X-Message-ID": string;
                    /** @description Document command message types. */
                    "X-Message-Type": "CreateDocument" | "DeleteDocument" | "UpdateDocument";
                };
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateDocument"] | components["schemas"]["DeleteDocument"] | components["schemas"]["UpdateDocument"];
                };
            };
            responses: {
                /** @description Message processed successfully. If a specific response will be returned for a given message, it will be defined. */
                200: {
                    headers: {
                        "X-Correlation-ID": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateDocumentResponse"];
                    };
                };
                /** @description An error occurred (covers any error status codes). */
                default: {
                    headers: {
                        "X-Correlation-ID": string;
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of artists */
        get: {
            parameters: {
                query?: {
                    /** @description Limits the number of items on a page */
                    limit?: components["parameters"]["PageLimit"];
                    /** @description Specifies the page number of the artists to be displayed */
                    offset?: components["parameters"]["PageOffset"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully returned a list of artists */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Artist"][];
                    };
                };
                400: components["responses"]["400Error"];
            };
        };
        put?: never;
        /** @description Lets a user post a new artist */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Artist"];
                };
            };
            responses: {
                /** @description Successfully created a new artist */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["400Error"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/artists/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Obtain information about an artist from his or her unique username */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    username: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully returned an artist */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            artist_name?: string;
                            artist_genre?: string;
                            albums_recorded?: number;
                        };
                    };
                };
                400: components["responses"]["400Error"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateDocument: {
            content: string;
        };
        CreateDocumentResponse: {
            id: string;
        };
        DeleteDocument: {
            id: string;
        };
        GetDocument: {
            id: string;
        };
        GetDocumentResponse: components["schemas"]["Document"];
        GetDocuments: {
            /** @enum {string} */
            orderBy?: "date" | "title";
            /** @enum {string} */
            orderDirection?: "asc" | "desc";
        };
        GetDocumentsResponse: components["schemas"]["Document"][];
        UpdateDocument: {
            id: string;
            content: string;
        };
        ErrorResponse: {
            /** @example 400 */
            code: number;
            /** @example Invalid request */
            message: string;
        };
        Artist: {
            artist_name?: string;
            artist_genre?: string;
            albums_recorded?: number;
            username: string;
        };
        Document: {
            id: string;
            content: string;
        };
        /**
         * @description A Problem Details object (RFC 9457).
         *     Additional properties specific to the problem type may be present.
         *
         * @example {
         *       "type": "urn:problem-type:exampleOrganization:exampleProblem",
         *       "title": "Description of the type of problem that occurred",
         *       "detail": "Description of specific occurrence of the problem"
         *     }
         */
        Problem: {
            /**
             * Format: uri
             * @description An absolute URI that identifies the problem type
             * @default about:blank
             */
            type: string;
            /**
             * @description A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
             * @example Service Unavailable
             */
            title?: string;
            /** @description A human-readable explanation specific to this occurrence of the problem */
            detail?: string;
        };
    };
    responses: {
        /** @description Invalid request */
        "400Error": {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    message?: string;
                };
            };
        };
    };
    parameters: {
        /** @description Limits the number of items on a page */
        PageLimit: number;
        /** @description Specifies the page number of the artists to be displayed */
        PageOffset: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
